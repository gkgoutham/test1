const http = require('http');
const fs = require('fs');
const path = require('path');

// Path to the file where responses will be saved
const filePath = path.join(__dirname, 'responses', 'all_responses.json');

// Ensure the directory exists
const saveDir = path.dirname(filePath);
if (!fs.existsSync(saveDir)) {
    fs.mkdirSync(saveDir, { recursive: true });
}

// Create the HTTP server
const server = http.createServer((req, res) => {
    if (req.method === 'POST') {
        let body = '';

        // Collect data chunks
        req.on('data', chunk => {
            body += chunk.toString();
        });

        // Handle the end of the request
        req.on('end', () => {
            const timestamp = new Date().toISOString();
            const entry = {
                timestamp: timestamp,
                data: body
            };

            // Read the existing file content
            fs.readFile(filePath, 'utf8', (err, data) => {
                if (err && err.code !== 'ENOENT') {
                    console.error('Error reading file:', err);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('Internal Server Error');
                    return;
                }

                let jsonData = [];
                if (data) {
                    try {
                        jsonData = JSON.parse(data);
                    } catch (parseErr) {
                        console.error('Error parsing JSON:', parseErr);
                    }
                }

                jsonData.push(entry);

                // Write the updated content back to the file
                fs.writeFile(filePath, JSON.stringify(jsonData, null, 2), 'utf8', (err) => {
                    if (err) {
                        console.error('Error saving file:', err);
                        res.writeHead(500, { 'Content-Type': 'text/plain' });
                        res.end('Internal Server Error');
                    } else {
                        console.log(`Response saved to ${filePath}`);
                        res.writeHead(200, { 'Content-Type': 'text/plain' });
                        res.end('Response saved successfully');
                    }
                });
            });
        });
    } else {
        res.writeHead(405, { 'Content-Type': 'text/plain' });
        res.end('Method Not Allowed');
    }
});

// Start the server
const port = 3000;
server.listen(port, () => {
    console.log(`Server running at http://localhost:${port}/`);
});