
Certainly! Let's create a complex example using the Chain of Responsibility pattern for validation. In this example, each validator in the chain will be responsible for validating a specific aspect of the input, and the result will be a consolidated list of error messages.

Validator Interface:
java
Copy code
import java.util.List;

public interface Validator<T> {
    List<String> validate(T input);
}
Abstract Validator:
java
Copy code
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractValidator<T> implements Validator<T> {
    private Validator<T> nextValidator;

    public AbstractValidator<T> setNextValidator(Validator<T> nextValidator) {
        this.nextValidator = nextValidator;
        return this;
    }

    @Override
    public List<String> validate(T input) {
        List<String> errors = new ArrayList<>();
        validateCurrent(input, errors);
        if (nextValidator != null) {
            errors.addAll(nextValidator.validate(input));
        }
        return errors;
    }

    protected abstract void validateCurrent(T input, List<String> errors);
}
Concrete Validators:
java
Copy code
public class EmailValidator extends AbstractValidator<String> {
    @Override
    protected void validateCurrent(String input, List<String> errors) {
        // Email validation logic, add errors to the list if invalid
        if (!isValidEmail(input)) {
            errors.add("Invalid email address");
        }
    }

    private boolean isValidEmail(String email) {
        // Implement email validation logic
        return email != null && email.matches("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}");
    }
}

public class LengthValidator extends AbstractValidator<String> {
    private int minLength;
    private int maxLength;

    public LengthValidator(int minLength, int maxLength) {
        this.minLength = minLength;
        this.maxLength = maxLength;
    }

    @Override
    protected void validateCurrent(String input, List<String> errors) {
        // Length validation logic, add errors to the list if invalid
        if (input == null || input.length() < minLength || input.length() > maxLength) {
            errors.add("Input length must be between " + minLength + " and " + maxLength);
        }
    }
}
Client Code:
java
Copy code
import java.util.List;

public class ValidationClient {
    public static void main(String[] args) {
        // Create a chain of validators
        Validator<String> emailValidator = new EmailValidator();
        Validator<String> lengthValidator = new LengthValidator(5, 10);

        emailValidator.setNextValidator(lengthValidator);

        // Input to be validated
        String input = "test@example.com";

        // Validate the input
        List<String> errors = emailValidator.validate(input);

        // Consolidated list of errors
        if (!errors.isEmpty()) {
            System.out.println("Validation failed. Errors:");
            for (String error : errors) {
                System.out.println("- " + error);
            }
        } else {
            System.out.println("Validation passed. No errors.");
        }
    }
}
In this example:

The Validator interface defines the contract for validators.
The AbstractValidator class provides the core logic for the Chain of Responsibility pattern.
Concrete validators (EmailValidator and LengthValidator) implement specific validation logic and extend AbstractValidator.
The client code creates a chain of validators and validates an input string, getting a consolidated list of errors.
Feel free to customize the validators and add more validators to the chain based on your specific validation needs. This example demonstrates how the Chain of Responsibility pattern can be used to create a flexible and extensible validation mechanism.

User
can you add more validator implemntation for abstract validator 
ChatGPT
Certainly! Let's add more concrete validator implementations for the AbstractValidator class. We'll include validators for checking if the input is not null, contains only alphanumeric characters, and if it meets a specific pattern.

Here's an extended example:

Concrete Validators:
java
Copy code
public class NotNullValidator extends AbstractValidator<String> {
    @Override
    protected void validateCurrent(String input, List<String> errors) {
        // Not null validation logic, add errors to the list if invalid
        if (input == null) {
            errors.add("Input cannot be null");
        }
    }
}

public class AlphanumericValidator extends AbstractValidator<String> {
    @Override
    protected void validateCurrent(String input, List<String> errors) {
        // Alphanumeric validation logic, add errors to the list if invalid
        if (input != null && !input.matches("[a-zA-Z0-9]+")) {
            errors.add("Input must contain only alphanumeric characters");
        }
    }
}

public class PatternValidator extends AbstractValidator<String> {
    private String pattern;

    public PatternValidator(String pattern) {
        this.pattern = pattern;
    }

    @Override
    protected void validateCurrent(String input, List<String> errors) {
        // Pattern validation logic, add errors to the list if invalid
        if (input != null && !input.matches(pattern)) {
            errors.add("Input does not match the required pattern");
        }
    }
}
Updated Client Code:
java
Copy code
import java.util.List;

public class ValidationClient {
    public static void main(String[] args) {
        // Create a chain of validators
        Validator<String> notNullValidator = new NotNullValidator();
        Validator<String> emailValidator = new EmailValidator();
        Validator<String> alphanumericValidator = new AlphanumericValidator();
        Validator<String> lengthValidator = new LengthValidator(5, 10);
        Validator<String> patternValidator = new PatternValidator("[a-zA-Z]+");

        notNullValidator
            .setNextValidator(emailValidator)
            .setNextValidator(alphanumericValidator)
            .setNextValidator(lengthValidator)
            .setNextValidator(patternValidator);

        // Input to be validated
        String input = "test123";

        // Validate the input
        List<String> errors = notNullValidator.validate(input);

        // Consolidated list of errors
        if (!errors.isEmpty()) {
            System.out.println("Validation failed. Errors:");
            for (String error : errors) {
                System.out.println("- " + error);
            }
        } else {
            System.out.println("Validation passed. No errors.");
        }
    }
}
In this extended example:

Added NotNullValidator to check if the input is not null.
Added AlphanumericValidator to check if the input contains only alphanumeric characters.
Added PatternValidator to check if the input matches a specific pattern.
The client code creates a chain of validators, including the new validators, and validates an input string, obtaining a consolidated list of errors.

Feel free to customize the validators and create additional validators based on your specific validation requirements.
