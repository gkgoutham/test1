package com.example.s3fileuploader;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;
import software.amazon.awssdk.services.s3.model.S3Object;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class S3FileUploader extends JFrame {
    private final JTextField apiEndpointField;
    private final JTextField bucketNameField;
    private final JTextField accessKeyField;
    private final JTextField secretKeyField;
    private final JTextField dirField;
    private final JButton listFilesButton;
    private final DefaultListModel<String> listModel;
    private final JList<String> fileList;
    private final JButton downloadButton;

    private S3Client s3Client;

    public S3FileUploader() {
        super("S3 File Uploader");
        setLayout(new GridBagLayout());
        var gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        add(new JLabel("API Endpoint:"), gbc);

        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        apiEndpointField = new JTextField(20);
        add(apiEndpointField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.NONE;
        add(new JLabel("Bucket Name:"), gbc);

        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        bucketNameField = new JTextField(20);
        add(bucketNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        add(new JLabel("Access Key:"), gbc);

        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        accessKeyField = new JTextField(20);
        add(accessKeyField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        add(new JLabel("Secret Key:"), gbc);

        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        secretKeyField = new JTextField(20);
        add(secretKeyField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        add(new JLabel("Directory:"), gbc);

        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dirField = new JTextField(20);
        add(dirField, gbc);

        listFilesButton = new JButton("List Files");
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.CENTER;
        add(listFilesButton, gbc);

        listModel = new DefaultListModel<>();
        fileList = new JList<>(listModel);
        var listScrollPane = new JScrollPane(fileList);
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        add(listScrollPane, gbc);

        downloadButton = new JButton("Download Selected");
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.CENTER;
        add(downloadButton, gbc);

        listFilesButton.addActionListener(this::listFiles);
        downloadButton.addActionListener(this::downloadFile);

        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void listFiles(ActionEvent e) {
        var endpoint = apiEndpointField.getText();
        var bucketName = bucketNameField.getText();
        var accessKey = accessKeyField.getText();
        var secretKey = secretKeyField.getText();
        var dir = dirField.getText();

        var credentials = AwsBasicCredentials.create(accessKey, secretKey);
        s3Client = S3Client.builder()
                .credentialsProvider(StaticCredentialsProvider.create(credentials))
                .region(Region.of("us-west-2"))
                .endpointOverride(URI.create(endpoint))
                .build();

        try {
            var listObjects = ListObjectsV2Request.builder()
                    .bucket(bucketName)
                    .prefix(dir)
                    .build();

            var listObjectsResponse = s3Client.listObjectsV2(listObjects);
            listModel.clear();
            for (S3Object object : listObjectsResponse.contents()) {
                listModel.addElement(object.key());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error listing files: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void downloadFile(ActionEvent e) {
        var selectedFile = fileList.getSelectedValue();
        if (selectedFile == null) {
            JOptionPane.showMessageDialog(this, "Please select a file to download", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        var endpoint = apiEndpointField.getText();
        var bucketName = bucketNameField.getText();
        var accessKey = accessKeyField.getText();
        var secretKey = secretKeyField.getText();

        try {
            var downloadPath = Paths.get(System.getProperty("user.home"), selectedFile);
            Files.createDirectories(downloadPath.getParent());

            s3Client.getObject(r -> r.bucket(bucketName).key(selectedFile), downloadPath);

            JOptionPane.showMessageDialog(this, "File downloaded successfully to " + downloadPath, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error downloading file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        new S3FileUploader();
    }
}