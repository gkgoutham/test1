import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

public class UserDataSaverBuilder {
    private final UserDataSaver.UserData userData;
    private final List<CompletableFuture<Void>> saveOperations = new ArrayList<>();

    public UserDataSaverBuilder(UserDataSaver.UserData userData) {
        this.userData = userData;
    }

    public UserDataSaverBuilder addSaveOperation(Function<UserDataSaver.UserData, UserDataSaver.UserData> dataProcessor, long timeout) {
        CompletableFuture<Void> future = new CompletableFuture<>();

        UserDataSaver.UserData processedData = dataProcessor.apply(userData);

        CompletableFuture.runAsync(() -> {
            try {
                System.out.println("Saving: " + processedData);
                // Add your actual database save operation code here

                // Simulate a time-consuming save operation
                TimeUnit.SECONDS.sleep(3);
                future.complete(null); // Complete the future when the save operation is successful
            } catch (Exception e) {
                future.completeExceptionally(e); // Complete the future exceptionally if an error occurs
            }
        });

        CompletableFuture<Void> saveOperation = future.completeOnTimeout(null, timeout, TimeUnit.SECONDS);
        saveOperations.add(saveOperation);

        return this;
    }

    public CompletableFuture<Void> build() {
        // Combine all save operations and wait for them to complete
        CompletableFuture<Void> combinedOperations = CompletableFuture.allOf(
                saveOperations.toArray(new CompletableFuture[0])
        );

        // Perform any final action after all save operations are completed
        return combinedOperations.thenCompose(ignored -> {
            System.out.println("All save operations completed successfully.");
            // Additional final actions, if needed

            // Returning a CompletableFuture for further chaining or joining
            return CompletableFuture.completedFuture(null);
        }).exceptionally(throwable -> {
            System.err.println("At least one save operation completed exceptionally: " + throwable.getMessage());
            return null; // Handle the exception as needed
        });
    }

    public static void main(String[] args) {
        // Example user data
        UserDataSaver.UserData userData = new UserDataSaver.UserData("John Doe", 25, "john@example.com");

        // Using the builder pattern to create a CompletableFuture for consolidated save operations
        CompletableFuture<Void> finalOperation = new UserDataSaverBuilder(userData)
                .addSaveOperation(Function.identity(), 5)
                .addSaveOperation(user -> new UserDataSaver.UserData(user.getName(), user.getAge() + 1, user.getEmail()), 8)
                .build();

        // Wait for the final operation to complete
        finalOperation.join();
    }
}