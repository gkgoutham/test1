import org.apache.arrow.vector.VectorSchemaRoot;
import org.apache.arrow.vector.types.pojo.ArrowType;
import org.apache.arrow.vector.types.pojo.Field;
import org.apache.arrow.vector.types.pojo.Schema;
import org.apache.arrow.vector.types.pojo.FieldType;
import org.apache.arrow.vector.VectorSchemaRoot;
import org.apache.arrow.vector.ipc.ArrowFileReader;
import org.apache.arrow.vector.ipc.message.MessageChannelReader;
import org.apache.arrow.vector.ipc.message.MessageChannelReader;
import org.apache.arrow.vector.types.pojo.Schema;
import org.apache.arrow.vector.types.pojo.Field;
import org.apache.arrow.vector.types.pojo.FieldType;
import org.apache.arrow.vector.types.pojo.ArrowType;
import org.apache.arrow.vector.ipc.ArrowFileReader;
import org.apache.arrow.vector.ipc.message.MessageChannelReader;
import org.apache.arrow.vector.util.SchemaUtil;
import org.apache.parquet.hadoop.ParquetReader;
import org.apache.parquet.hadoop.example.GroupReadSupport;
import org.apache.parquet.io.InputFile;
import org.apache.parquet.io.InputFile;
import org.apache.parquet.io.PositionInputStream;
import org.apache.hadoop.fs.Path;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ParquetReaderUtil {
    public static List<Object[]> readParquetFile(File file) {
        List<Object[]> records = new ArrayList<>();
        try (ParquetReader<Group> reader = ParquetReader.builder(new GroupReadSupport(), new Path(file.toURI())).build()) {
            Group group;
            while ((group = reader.read()) != null) {
                Object[] record = new Object[group.getType().getFieldCount()];
                for (int i = 0; i < group.getType().getFieldCount(); i++) {
                    record[i] = group.getValueToString(group.getType().getField(i).getName(), 0);
                }
                records.add(record);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return import javax.swing.table.AbstractTableModel;
import javax.swing.*;
import java.util.List;

public class TableModel extends AbstractTableModel {
    private final List<Object[]> data;
    private final String[] columnNames;

    public TableModel(List<Object[]> data, String[] columnNames) {
        this.data = data;
        this.columnNames = columnNames;
    }

    @Override
    public int getRowCount() {
        return data.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        return data.get(rowIndex)[columnIndex];
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }
}
    private void downloadFile(ActionEvent e) {
        var selectedFile = fileList.getSelectedValue();
        if (selectedFile == null) {
            JOptionPane.showMessageDialog(this, "Please select a file to download", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        var endpoint = apiEndpointField.getText();
        var bucketName = bucketNameField.getText();
        var accessKey = accessKeyField.getText();
        var secretKey = secretKeyField.getText();

        try {
            var downloadPath = Paths.get(System.getProperty("user.home"), selectedFile);
            Files.createDirectories(downloadPath.getParent());

            s3Client.getObject(r -> r.bucket(bucketName).key(selectedFile), downloadPath);

            JOptionPane.showMessageDialog(this, "File downloaded successfully to " + downloadPath, "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Read and display the Parquet file
            displayParquetFile(downloadPath.toFile());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error downloading file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayParquetFile(File file) {
        try {
            List<Object[]> data = ParquetReaderUtil.readParquetFile(file);
            String[] columnNames = {"Column1", "Column2", "Column3"}; // Replace with actual column names
            TableModel tableModel = new TableModel(data, columnNames);
            table.setModel(tableModel);
            
            // Add filtering functionality
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(tableModel);
            table.setRowSorter(sorter);

            JTextField filterText = new JTextField();
            filterText.getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    applyFilter();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    applyFilter();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    applyFilter();
                }

                private void applyFilter() {
                    String text = filterText.getText();
                    if (text.trim().length() == 0) {
                        sorter.setRowFilter(null);
                    } else {
                        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    }
                }
            });

            var filterPanel = new JPanel(new BorderLayout());
            filterPanel.add(new JLabel("Filter:"), BorderLayout.WEST);
            filterPanel.add(filterText, BorderLayout.CENTER);

            add(filterPanel, BorderLayout.SOUTH);
            revalidate();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error reading Parquet file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        new S3FileDownloader();
    }
}a



