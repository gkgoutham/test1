import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

public class DataSaverBuilder<T, V> {
    private final T data;
    private final List<CompletableFuture<Void>> saveOperations = new ArrayList<>();

    public DataSaverBuilder(T data) {
        this.data = data;
    }

    public DataSaverBuilder<T, V> addSaveOperation(Function<T, V> dataProcessor, long timeout) {
        CompletableFuture<Void> future = new CompletableFuture<>();

        V processedData = dataProcessor.apply(data);

        CompletableFuture.runAsync(() -> {
            try {
                System.out.println("Saving: " + processedData);
                // Add your actual database save operation code here

                // Simulate a time-consuming save operation
                TimeUnit.SECONDS.sleep(3);
                future.complete(null); // Complete the future when the save operation is successful
            } catch (Exception e) {
                future.completeExceptionally(e); // Complete the future exceptionally if an error occurs
            }
        });

        CompletableFuture<Void> saveOperation = future.completeOnTimeout(null, timeout, TimeUnit.SECONDS);
        saveOperations.add(saveOperation);

        return this;
    }

    public CompletableFuture<Void> build() {
        // Combine all save operations and wait for them to complete
        CompletableFuture<Void> combinedOperations = CompletableFuture.allOf(
                saveOperations.toArray(new CompletableFuture[0])
        );

        // Perform validation before joining
        return combinedOperations.thenCompose(ignored -> validateSaveOperations())
                .exceptionally(throwable -> {
                    System.err.println("Validation failed: " + throwable.getMessage());
                    return null; // Handle the exception as needed
                });
    }

    private CompletableFuture<Void> validateSaveOperations() {
        List<CompletableFuture<Void>> failedOperations = new ArrayList<>();

        for (CompletableFuture<Void> saveOperation : saveOperations) {
            if (saveOperation.isCompletedExceptionally()) {
                failedOperations.add(saveOperation);
            }
        }

        if (!failedOperations.isEmpty()) {
            // Handle failed operations, if needed
            return CompletableFuture.allOf(failedOperations.toArray(new CompletableFuture[0]))
                    .thenCompose(ignored -> CompletableFuture.failedFuture(new RuntimeException("At least one operation failed.")));
        }

        // All operations completed successfully
        return CompletableFuture.completedFuture(null);
    }

    public static void main(String[] args) {
        // Example data
        UserData userData = new UserData("John Doe", 25, "john@example.com");

        // Using the builder pattern to create a CompletableFuture for consolidated save operations
        CompletableFuture<Void> finalOperation = new DataSaverBuilder<>(userData)
                .addSaveOperation(Function.identity(), 5) // No transformation
                .addSaveOperation(user -> user.getName().toUpperCase(), 8) // Transform name to uppercase
                .build();

        // Wait for the final operation to complete
        finalOperation.join();
    }

    static class UserData {
        private final String name;
        private final int age;
        private final String email;

        public UserData(String name, int age, String email) {
            this.name = name;
            this.age = age;
            this.email = email;
        }

        @Override
        public String toString() {
            return "UserData{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    ", email='" + email + '\'' +
                    '}';
        }
    }
}